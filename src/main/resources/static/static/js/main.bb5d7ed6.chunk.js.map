{"version":3,"sources":["client.js","Conteiner.js","notification.js","pages/Courses.js","Footer.js","forms/AddStudentForms.js","forms/SecondEditForm.js","pages/Students.js","App.js","serviceWorker.js","index.js"],"names":["checkStatus","response","ok","error","Error","statusText","json","then","e","Promise","reject","getAllStudents","fetch","getAllStudentCourse","studentId","deleteStudent","method","updateStudent","studnetId","student","headers","body","JSON","stringify","console","log","catch","Conteiner","props","style","width","margin","children","openNotification","type","message","description","notification","successNotification","infoNotification","errorNotification","Courses","state","courses","isFetching","fetchStudentCourses","setState","match","params","res","course","err","this","className","indicator","LoadingOutlined","fontSize","spin","length","dataSource","columns","title","dataIndex","key","rowKey","pagination","marginTop","image","Empty","PRESENTED_IMAGE_SIMPLE","Component","Footer","undefined","numberOfStudents","backgroundColor","marginRight","size","onClick","handleAddStudentClickEvent","marginBottom","AddStudentForm","initialValues","firstName","lastName","email","gender","validate","values","errors","test","includes","onSubmit","setSubmitting","onSuccess","onFailuer","finally","touched","handleChange","handleBlur","handleSubmit","isSubmitting","submitForm","isValid","name","onChange","onBlur","value","placeholder","color","disabled","SecondEditForm","submitter","enableReinitialize","Students","students","selectedStudent","isAddStuudentModalVisibility","isEditStudentModalVisibil","openAddStuudentModal","openEditStudentModal","closeAddStuudentModal","closeEditStudentModal","deleteSt","id","fetchStudents","editStudent","updateStudentFormSubmitter","s","commonElements","visible","onOk","onCancel","cancelText","okText","render","text","charAt","toUpperCase","to","placement","onConfirm","danger","footer","App","exact","path","component","Boolean","window","location","hostname","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.bb5d7ed6.chunk.js","sourcesContent":["import fetch from 'unfetch';\r\n\r\nconst checkStatus = response => {\r\n    if(response.ok) {\r\n        return response;\r\n    } else {\r\n        let error = new Error(response.statusText);\r\n        error.response = response;\r\n        response.json().then(e => {\r\n            error.error = e;\r\n        });\r\n        return Promise.reject(error);\r\n    }\r\n}\r\n\r\nexport const getAllStudents = ()  => \r\n    fetch('/api/students').then(checkStatus);\r\n\r\nexport const getAllStudentCourse = (studentId) => \r\n    fetch(`/api/students/${studentId}/course`)\r\n    .then(checkStatus);\r\n\r\nexport const addNewStudent = student => \r\nfetch('/api/students', {\r\n    headers: {\r\n        'Content-Type': 'application/json'\r\n    },\r\n    method: 'POST',\r\n    body: JSON.stringify(student)\r\n}).then(checkStatus);\r\n\r\nexport const deleteStudent = studentId => \r\n    fetch(`/api/students/${studentId}`, {\r\n        method: 'DELETE'\r\n    }).then(checkStatus);\r\n\r\nexport const updateStudent = (studnetId, student) => \r\n    fetch(`/api/students/${studnetId}`, {\r\n        headers: {\r\n            'Content-Type': 'application/json'\r\n        },\r\n        method: 'PUT',\r\n        body: JSON.stringify(student)\r\n    }).then(response => { \r\n        console.log('response: ' + JSON.stringify(response))\r\n    }).catch(checkStatus);\r\n","import React from 'react';\r\n\r\nconst Conteiner = props => (\r\n        <div style={{width: '1400px', margin: '0 auto'}}>\r\n            {props.children}\r\n        </div>\r\n);\r\nexport default Conteiner;","import { notification } from \"antd\";\r\n\r\nconst openNotification = (type, message, description) => {\r\n    notification[type]({\r\n      message,\r\n      description\r\n    });\r\n  };\r\nexport const successNotification = (message, description) => \r\n    openNotification('success', message, description);\r\n\r\nexport const infoNotification = (message, description) => \r\n    openNotification('info', message, description);\r\n    \r\nexport const warningNotification = (message, description) => \r\n    openNotification('warning', message, description);\r\n\r\nexport const errorNotification = (message, description) => \r\n    openNotification('error', message, description);","import React, {Component} from 'react';\r\nimport {getAllStudentCourse} from '../client';\r\nimport {Table, Empty} from 'antd';\r\nimport Conteiner from '../Conteiner';\r\nimport {infoNotification} from '../notification';\r\nimport { Spin } from 'antd';\r\nimport { LoadingOutlined } from '@ant-design/icons';\r\n\r\n\r\nconst antIcon = () => <LoadingOutlined style={{ fontSize: 24 }} spin />;\r\n\r\nclass Courses extends Component {\r\n\r\n   state = {\r\n      courses: [],\r\n      studentId: '',\r\n      isFetching: false\r\n   }\r\n   componentDidMount () {\r\n      this.fetchStudentCourses();\r\n    }\r\n\r\n   fetchStudentCourses = () => {\r\n      this.setState({isFetching: true})\r\n      const studentId = this.props.match.params.studentId;\r\n      this.setState({studentId});\r\n      getAllStudentCourse(studentId)\r\n         .then(res => res.json())\r\n         .then(course => {\r\n            this.setState({courses: course})\r\n            this.setState({isFetching: false})\r\n         }).catch(err => {\r\n            const error = err.error.error;\r\n            const description = err.error.description;\r\n            infoNotification(error, description);\r\n            this.setState({isFetching: false})\r\n            \r\n         })\r\n   } \r\n    render() {\r\n      const {courses, isFetching} = this.state;\r\n      if(isFetching) {\r\n         return (\r\n            <div className='spinner'>\r\n               <Spin indicator={antIcon()} />\r\n            </div>\r\n         )\r\n      }\r\n      if(courses && courses.length) {\r\n\r\n         const columns = [\r\n            {\r\n               title: 'Course Id',\r\n               dataIndex: 'courseId',\r\n               key: 'courseId'\r\n            },\r\n            {\r\n               title: 'Department',\r\n               dataIndex: 'department',\r\n               key: 'department'\r\n            },\r\n            {\r\n               title: 'Description',\r\n               dataIndex: 'description',\r\n               key: 'description'\r\n            },\r\n            {\r\n               title: 'Grade',\r\n               dataIndex: 'grade',\r\n               key: 'grade'\r\n            },\r\n            {\r\n               title: 'Name',\r\n               dataIndex: 'name',\r\n               key: 'name'\r\n            },\r\n            {\r\n               title: 'Start Date',\r\n               dataIndex: 'startDate',\r\n               key: 'startDate'\r\n            },\r\n            {\r\n               title: 'End Date',\r\n               dataIndex: 'endDate',\r\n               key: 'endDate'\r\n            },\r\n            {\r\n               title: 'Teacher Name',\r\n               dataIndex: 'teacherName',\r\n               key: 'teacherName'\r\n            }\r\n         ]\r\n        \r\n         return (\r\n            <Conteiner>\r\n               <Table \r\n                  dataSource={courses} \r\n                  columns={columns}\r\n                  rowKey='courseId'\r\n                  pagination= {false}\r\n                  />\r\n            </Conteiner>\r\n         )\r\n      } else {\r\n         return (<Conteiner>\r\n            <Empty \r\n               style={{marginTop:'9em' }}\r\n               image={Empty.PRESENTED_IMAGE_SIMPLE}\r\n               description={\r\n                  'No course found'\r\n               }\r\n               />\r\n         </Conteiner>\r\n         );\r\n      }\r\n      \r\n      \r\n    }\r\n}\r\n \r\nexport default Courses;","import React from 'react';\r\nimport Conteiner from './Conteiner';\r\nimport {Button, Avatar} from 'antd';\r\nimport './Footer.css';\r\nconst Footer = (props) => (\r\n    <div className='footer'>\r\n        <Conteiner>\r\n            {props.numberOfStudents !== undefined ? \r\n                <Avatar \r\n                    style={{backgroundColor: '#f56a00', marginRight: '5px'}} size='large'>{props.numberOfStudents}</Avatar> : null}\r\n            <Button onClick={() => props.handleAddStudentClickEvent()} type='primary'>Add new student +</Button>\r\n        </Conteiner>\r\n    </div>\r\n);\r\n\r\nexport default Footer;","import React from 'react';\r\nimport { Formik } from 'formik';\r\nimport {Input, Button, Tag } from 'antd';\r\nimport { addNewStudent } from '../client'\r\n\r\nconst marginBottom = {marginBottom: '10px'};\r\n\r\nconst AddStudentForm = (props) => \r\n  (\r\n    <Formik\r\n      initialValues={{firstName: '', lastName: '', email: '', gender: '' }}\r\n      validate={values => {\r\n        const errors = {};\r\n\r\n        if(!values.firstName) {\r\n          errors.firstName = 'First Name required';\r\n        }\r\n        if(!values.lastName) {\r\n          errors.lastName = 'Last Name required';\r\n        }\r\n        if (!values.email) {\r\n          errors.email = 'Email required';\r\n        } else if (\r\n          !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i.test(values.email)\r\n        ) {\r\n          errors.email = 'Invalid email address';\r\n        }\r\n        if(!values.gender) {\r\n          errors.gender = 'Gender required';\r\n        } else if (!['MALE', 'male', 'FEMALE', 'female'].includes(values.gender)) {\r\n          errors.gender = 'Gender must be (MALE, male, FEMALE)';\r\n        }\r\n\r\n        return errors;\r\n      }}\r\n      onSubmit={(values, { setSubmitting }) => {\r\n          addNewStudent(values).then(() => {\r\n            props.onSuccess();\r\n          }).catch(error => {\r\n            props.onFailuer(error);\r\n          }).finally(setSubmitting(false))\r\n          \r\n      }}\r\n    >\r\n      {({\r\n        values,\r\n        errors,\r\n        touched,\r\n        handleChange,\r\n        handleBlur,\r\n        handleSubmit,\r\n        isSubmitting,\r\n        submitForm,\r\n        isValid\r\n        /* and other goodies */\r\n      }) => (\r\n        <form onSubmit={handleSubmit}>\r\n          <Input\r\n            style={marginBottom}\r\n            name=\"firstName\"\r\n            onChange={handleChange}\r\n            onBlur={handleBlur}\r\n            value={values.firstName}\r\n            placeholder='First name. E.g. John'\r\n          />\r\n          {errors.firstName && touched.firstName && <Tag color='red' style={marginBottom}>{errors.firstName}</Tag>}\r\n          <Input\r\n            style={marginBottom}\r\n            name=\"lastName\"\r\n            onChange={handleChange}\r\n            onBlur={handleBlur}\r\n            value={values.lastName}\r\n            placeholder='Last name. E.g. Nelson'\r\n          />\r\n          {errors.lastName && touched.lastName && <Tag color='red' style={marginBottom}>{errors.lastName}</Tag>}\r\n          <Input\r\n            style={marginBottom}\r\n            name=\"email\"\r\n            type='email'\r\n            onChange={handleChange}\r\n            onBlur={handleBlur}\r\n            value={values.email}\r\n            placeholder='Email. E.g. example@gmail.com'\r\n          />\r\n          {errors.email && touched.email && <Tag color='red' style={marginBottom}>{errors.email}</Tag>}\r\n          <Input\r\n            style={marginBottom}\r\n            name=\"gender\"                  \r\n            onChange={handleChange}\r\n            onBlur={handleBlur}\r\n            value={values.gender}\r\n            placeholder='Gender. E.g. MALE or FEMALE'\r\n          />\r\n          {errors.gender && touched.gender && <Tag color='red' style={marginBottom}>{errors.gender}</Tag>}\r\n          \r\n          <Button \r\n            onClick={() => submitForm()} \r\n            type=\"submit\" \r\n            disabled={isSubmitting || (touched && !isValid)}>\r\n            Submit\r\n          </Button>\r\n        </form>\r\n      )}\r\n    </Formik>\r\n        \r\n        );\r\nexport default AddStudentForm;","import React, { Component } from 'react';\r\nimport { Formik, Persist } from 'formik';\r\nimport {Input, Button, Tag } from 'antd';\r\nimport { updateStudent } from '../client'\r\nconst marginBottom = {marginBottom: '10px'};\r\nconst  SecondEditForm = props => {\r\n    \r\n        const {submitter, initialValues } = props;\r\n        \r\n        return(\r\n            \r\n            <Formik\r\n                initialValues = {initialValues}\r\n                enableReinitialize={true}\r\n\r\n                onSubmit = {(values, {setSubmitting}) => {\r\n                    submitter(values);\r\n                    //updateStudent(values.studentId, values).then(res => console.log(res)).catch(err => console.log(err))\r\n                    setSubmitting(false);\r\n                }}\r\n            >\r\n                \r\n                {({\r\n                    values,\r\n                    errors,\r\n                    touched,\r\n                    handleChange,\r\n                    handleBlur,\r\n                    handleSubmit,\r\n                    isSubmitting,\r\n                    submitForm,\r\n                    isValid,\r\n                    \r\n                }) => (\r\n                    <form onSubmit={handleSubmit}>\r\n                    <Input\r\n                        style={marginBottom}\r\n                        name=\"firstName\"\r\n                        onChange={handleChange}\r\n                        onBlur={handleBlur}\r\n                        value={values.firstName}\r\n                        placeholder='First name. E.g. John'\r\n                    />\r\n                    {errors.firstName && touched.firstName && <Tag color='red' style={marginBottom}>{errors.firstName}</Tag>}\r\n                   \r\n                    <Button \r\n                        onClick={() => submitForm()} \r\n                        type=\"submit\" \r\n                        disabled={isSubmitting || (touched && !isValid)}>\r\n                        Submit\r\n                    </Button>\r\n                    </form>\r\n                )}\r\n        \r\n            </Formik>\r\n        );\r\n}   \r\n\r\nexport default SecondEditForm;","import React, {Component} from 'react';\r\nimport '../App.css';\r\nimport { getAllStudents, deleteStudent, updateStudent } from '../client';\r\nimport Conteiner from '../Conteiner';\r\nimport {\r\n\tTable,\r\n\tAvatar,\r\n\tSpin,\r\n\tEmpty,\r\n\tButton,\r\n\tPopconfirm\r\n} from 'antd';\r\nimport { LoadingOutlined } from '@ant-design/icons';\r\nimport Footer from '../Footer';\r\nimport Modal from 'antd/lib/modal/Modal';\r\nimport AddStudentForm from '../forms/AddStudentForms';\r\nimport EditStudentForm from '../forms/EditStudentForm';\r\nimport { errorNotification, successNotification } from '../notification';\r\nimport { Link } from 'react-router-dom';\r\nimport SecondEditForm from '../forms/SecondEditForm';\r\n\r\nconst antIcon = () => <LoadingOutlined style={{ fontSize: 24 }} spin />;\r\nconst textConfirm = 'Are you sure to delete this task?';\r\n\r\nclass Students extends Component {\r\n\r\n\tstate = {\r\n\t\tstudents: [],\r\n\t\tselectedStudent: {},\r\n\t\tisFetching: false,\r\n\t\tisAddStuudentModalVisibility: false,\r\n\t\tisEditStudentModalVisibil: false\r\n\t}\r\n\tcomponentDidMount () {\r\n\t\tthis.fetchStudents();\r\n    }\r\n\r\n\topenAddStuudentModal = () => this.setState({isAddStuudentModalVisibility: true})\r\n\topenEditStudentModal = () => this.setState({isEditStudentModalVisibil: true})\r\n\r\n\tcloseAddStuudentModal = () => this.setState({isAddStuudentModalVisibility: false})\r\n\tcloseEditStudentModal = () => this.setState({isEditStudentModalVisibil: false})\r\n\r\n\t\r\n\tdeleteSt = (id, name) => {\r\n        deleteStudent(id).then(() => {\r\n\t\t\t\tsuccessNotification(`You delete ${name}`, '')\r\n\t\t\t\tthis.fetchStudents()}\r\n\t\t).catch(err => {console.log(err);})\r\n\t}\r\n\teditStudent = selectedStudent => {\r\n\t\tthis.setState({selectedStudent})\r\n\t\tthis.openEditStudentModal()\r\n\t}\r\n\tupdateStudentFormSubmitter  = s => {\r\n\t\tupdateStudent(s.studentId, s).then(() => {\r\n\t\t\tthis.closeEditStudentModal();\r\n\t\t\tthis.fetchStudents();\r\n\t\t})\r\n\t}\r\n\tfetchStudents = () => {\r\n\t\tthis.setState({\r\n\t\t\tisFetching: true\r\n\t\t});\r\n\t\tgetAllStudents()\r\n\t\t.then(res => res.json()\r\n\t\t.then(students => {\r\n\t\t\tconsole.log(students)\r\n\t\t\tthis.setState({students, isFetching: false})\r\n\t\t})).catch(error => {\r\n\t\t\tconst message = error.error.message;\r\n\t\t\tconst description = error.error.error;\r\n\t\t\terrorNotification(message, description);\r\n\t\t\tthis.setState({\r\n\t\t\t\tisFetching:false\r\n\t\t\t})\r\n\t\t})\r\n\t}\r\n\t\r\n\trender() {\r\n\r\n\t\t\r\n\t\tconst {students, isFetching, isAddStuudentModalVisibility, isEditStudentModalVisibil} = this.state;\r\n\t\tif(isFetching) {\r\n\t\t\treturn (\r\n\t\t\t\t<div className='spinner'>\r\n\t\t\t\t\t<Spin indicator={antIcon()}/>\r\n\t\t\t\t</div>\t\t\t\r\n\t\t\t)\r\n\t\t}\r\n\t\t\r\n\t\tconst commonElements = () => (\r\n\t\t\t<div>\r\n\t\t\t\t<Modal \r\n\t\t\t\t\ttitle='Add new student'\r\n\t\t\t\t\tvisible={isAddStuudentModalVisibility}\r\n\t\t\t\t\tonOk={this.closeAddStuudentModal}\r\n\t\t\t\t\tonCancel={this.closeAddStuudentModal}\r\n\t\t\t\t\tcancelText={true}\r\n\t\t\t\t\tokText={true}\r\n\t\t\t\t\twidth={1000}>\r\n\t\t\t\t\t\t<AddStudentForm \r\n\t\t\t\t\t\t\tonSuccess = {() =>\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tthis.closeAddStuudentModal();\r\n\t\t\t\t\t\t\t\tthis.fetchStudents();\r\n\t\t\t\t\t\t\t\tsuccessNotification('Congratulation!', 'You successfully added new student');\r\n\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\tonFailuer = {error => {\r\n\t\t\t\t\t\t\t\tconst message = error.error.message;\r\n\t\t\t\t\t\t\t\tconst description = error.error.error;\r\n\t\t\t\t\t\t\t\terrorNotification(message, description);\r\n\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t</Modal >\r\n\t\t\t\t<Footer numberOfStudents={students.length}\r\n\t\t\t\thandleAddStudentClickEvent={this.openAddStuudentModal}></Footer>\r\n\r\n\t\t\t</div>\r\n\t\t)\r\n\t\t\r\n\t\tconst editModal = () => (\r\n\t\t\t<div>\r\n\t\t\t\t<Modal\r\n\t\t\t\t\tvisible={isEditStudentModalVisibil}\r\n\t\t\t\t\ttitle=\"Edit\"\r\n\t\t\t\t\tonOk={this.closeEditStudentModal}\r\n\t\t\t\t\tonCancel={this.closeEditStudentModal}\r\n\t\t\t\t\twidth={1000}\r\n\t\t\t\t\tfooter={[\r\n\t\t\t\t\t<Button key=\"back\" onClick={this.closeEditStudentModal}>\r\n\t\t\t\t\t\tReturn\r\n\t\t\t\t\t</Button>,\r\n\t\t\t\t\t<Button key=\"submit\" type=\"primary\">\r\n\t\t\t\t\t\tSubmit\r\n\t\t\t\t\t</Button>,\r\n\t\t\t\t\t]}>\r\n\t\t\t\t\t{/* <EditStudentForm \r\n\t\t\t\t\t\tinitialValues = {this.state.selectedStudent}\r\n\t\t\t\t\t\tsubmitter={this.updateStudentFormSubmitter}></EditStudentForm> */}\r\n\r\n\t\t\t\t\t\t<SecondEditForm \r\n\t\t\t\t\t\t\tinitialValues= {this.state.selectedStudent}\r\n\t\t\t\t\t\t\tsubmitter={this.updateStudentFormSubmitter}></SecondEditForm>\r\n\r\n\t\t\t\t\t\r\n\t\t\t\t</Modal>\r\n\t\t\t</div>\r\n\t\t)\r\n\t\t\r\n\t\tif(students && students.length) {\r\n\t\t\t\t\r\n\t\t\tconst columns = [\r\n\t\t\t\t{\r\n\t\t\t\t\ttitle: '',\r\n\t\t\t\t\tkey: 'avatar',\r\n\t\t\t\t\trender: (text, student) => (\r\n\t\t\t\t\t\t<Avatar size='large'>\r\n\t\t\t\t\t\t\t{`${student.firstName.charAt(0).toUpperCase()} ${student.lastName.charAt(0).toUpperCase()}`}\r\n\t\t\t\t\t\t</Avatar>\r\n\t\t\t\t\t)\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\ttitle: 'StudentId',\r\n\t\t\t\t\tdataIndex: 'studentId',\r\n\t\t\t\t\tkey: 'studentId'\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\ttitle: 'First Name',\r\n\t\t\t\t\tdataIndex: 'firstName',\r\n\t\t\t\t\tkey: 'firstName'\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\ttitle: 'Last Name',\r\n\t\t\t\t\tdataIndex: 'lastName',\r\n\t\t\t\t\tkey: 'lastName'\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\ttitle: 'Email',\r\n\t\t\t\t\tdataIndex: 'email',\r\n\t\t\t\t\tkey: 'email'\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\ttitle: 'Gender',\r\n\t\t\t\t\tdataIndex: 'gender',\r\n\t\t\t\t\tkey: 'gender'\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\ttitle: '',\r\n\t\t\t\t\tkey: 'course',\r\n\t\t\t\t\trender: (text, student) => (\r\n\t\t\t\t\t\t<Link to={`/${student.studentId}/courses`}>Course</Link>\r\n\t\t\t\t\t)\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\ttitle: '',\r\n\t\t\t\t\tkey: 'edit',\r\n\t\t\t\t\trender: (text, student) => {\r\n\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t<Button onClick={() => this.editStudent(student)}>Edit</Button>\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t)\r\n\t\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t}\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\ttitle: '',\r\n\t\t\t\t\tkey: 'delete',\r\n\t\t\t\t\trender: (text, student) => (\r\n\t\t\t\t\t\t<Popconfirm placement=\"topLeft\" \r\n\t\t\t\t\t\t\ttitle={textConfirm} \r\n\t\t\t\t\t\t\tonConfirm={() => this.deleteSt(student.studentId, student.firstName)} okText=\"Yes\" cancelText=\"No\"\r\n\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t<Button danger >Delete</Button>\r\n\t\t\t\t\t\t  </Popconfirm>\r\n\t\t\t\t\t\t  \t\r\n\t\t\t\t\t)\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\r\n\t\t\t];\r\n\t\t\t\r\n\t\t\treturn (\r\n\t\t\t\t<Conteiner>\r\n\t\t\t\t\t<Table style={{marginBottom:'100px'}}\r\n\t\t\t\t\t\tdataSource={students} \r\n\t\t\t\t\t\tcolumns={columns} \r\n\t\t\t\t\t\trowKey='studentId'\r\n\t\t\t\t\t\tpagination= {false}\r\n\t\t\t\t\t/>\r\n\t\t\t\t\t{commonElements()}\r\n\t\t\t\t\t{editModal()}\r\n\t\t\t\t</Conteiner>\r\n\t\t\t);\r\n\t\t}\r\n\t\treturn (<Conteiner>\r\n\t\t\t<Empty \r\n\t\t\t\tstyle={{marginTop:'9em' }}\r\n\t\t\t\timage={Empty.PRESENTED_IMAGE_SIMPLE}\r\n\t\t\t\tdescription={\r\n\t\t\t\t\t'No student found'\r\n\t\t\t\t}\r\n\t\t\t\t/>\r\n\t\t\t{commonElements()};\r\n\t\t</Conteiner>\r\n\t\t);\r\n\t\t\r\n\t}\r\n\t\r\n}\r\n\r\nexport default Students;","import React, {Component} from 'react';\nimport './App.css';\nimport { \n\tBrowserRouter as Router,\n\tRoute} from 'react-router-dom';\nimport Courses from './pages/Courses';\nimport Students from './pages/Students';\n\nclass App extends Component {\n\trender() {\n\t\treturn (\n\t\t\n\t\t\t<Router >\n\t\t\t\t<Route exact path='/' component={Students}/>\n\t\t\t\t<Route exact path='/:studentId/courses' component={Courses}/>\n\t\t\t</Router>\n\t\t\t\n\t\t)\n\t}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'antd/dist/antd.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter } from 'react-router-dom';\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}